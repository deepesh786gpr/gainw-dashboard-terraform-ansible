#!/usr/bin/env node

/**
 * Show Imported GitHub Templates
 * This script displays the templates imported from your GitHub repository
 */

const https = require('https');
const http = require('http');

const API_BASE = 'http://localhost:5000/api';

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const isHttps = url.startsWith('https:');
    const client = isHttps ? https : http;
    
    const req = client.request(url, options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          if (res.statusCode >= 200 && res.statusCode < 300) {
            resolve({
              ok: true,
              status: res.statusCode,
              json: () => Promise.resolve(JSON.parse(data)),
              text: () => Promise.resolve(data)
            });
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${data}`));
          }
        } catch (error) {
          reject(error);
        }
      });
    });
    
    req.on('error', reject);
    req.end();
  });
}

async function showImportedTemplates() {
  console.log('üéâ GitHub Terraform Modules Successfully Imported!');
  console.log('=' .repeat(60));
  
  try {
    const response = await makeRequest(`${API_BASE}/templates`);
    const templates = await response.json();
    
    // Filter the newly imported templates (they have specific names)
    const importedTemplates = templates.filter(template => 
      ['VPC with Subnets', 'EC2 with Auto Scaling', 'S3 Bucket with Security', 
       'RDS Database', 'EKS Cluster', 'Lambda Function'].includes(template.name) &&
      ['networking', 'compute', 'storage', 'database', 'container', 'serverless'].includes(template.category)
    );
    
    console.log(`\nüì¶ Repository: deepesh786gpr/terrafrom-module`);
    console.log(`‚úÖ Successfully imported ${importedTemplates.length} modules as templates\n`);
    
    // Group by category
    const categories = {
      networking: [],
      compute: [],
      storage: [],
      database: [],
      container: [],
      serverless: []
    };
    
    importedTemplates.forEach(template => {
      if (categories[template.category]) {
        categories[template.category].push(template);
      }
    });
    
    // Display templates by category
    Object.entries(categories).forEach(([category, templates]) => {
      if (templates.length > 0) {
        const categoryIcon = {
          networking: 'üåê',
          compute: 'üíª',
          storage: 'üíæ',
          database: 'üóÑÔ∏è',
          container: '‚ò∏Ô∏è',
          serverless: '‚ö°'
        }[category];
        
        console.log(`${categoryIcon} ${category.toUpperCase()}`);
        templates.forEach(template => {
          console.log(`   ‚úÖ ${template.name}`);
          console.log(`      ID: ${template.id}`);
          console.log(`      Description: ${template.description}`);
          console.log('');
        });
      }
    });
    
    console.log('üéØ What You Can Do Now:');
    console.log('');
    console.log('1. üåê View Templates: http://localhost:3006/templates');
    console.log('2. üöÄ Create Deployments: Select any template and deploy infrastructure');
    console.log('3. üîß Customize Variables: Each template has pre-configured variables');
    console.log('4. üìä Monitor Deployments: Track deployment progress in real-time');
    console.log('5. üêô GitHub Integration: Import more repositories at http://localhost:3006/github-import');
    
    console.log('\nüìã Template Features:');
    console.log('');
    console.log('üåê VPC with Subnets:');
    console.log('   ‚Ä¢ Multi-AZ public/private subnets');
    console.log('   ‚Ä¢ NAT gateways and Internet Gateway');
    console.log('   ‚Ä¢ DNS support and security groups');
    console.log('');
    console.log('üíª EC2 with Auto Scaling:');
    console.log('   ‚Ä¢ Auto Scaling Groups with launch templates');
    console.log('   ‚Ä¢ Security groups and IAM roles');
    console.log('   ‚Ä¢ Configurable instance types and capacity');
    console.log('');
    console.log('üíæ S3 Bucket with Security:');
    console.log('   ‚Ä¢ Encryption and versioning enabled');
    console.log('   ‚Ä¢ Public access blocking');
    console.log('   ‚Ä¢ Lifecycle policies support');
    console.log('');
    console.log('üóÑÔ∏è RDS Database:');
    console.log('   ‚Ä¢ Multi-engine support (MySQL, PostgreSQL, etc.)');
    console.log('   ‚Ä¢ High availability with Multi-AZ');
    console.log('   ‚Ä¢ Automated backups and security groups');
    console.log('');
    console.log('‚ò∏Ô∏è EKS Cluster:');
    console.log('   ‚Ä¢ Managed Kubernetes control plane');
    console.log('   ‚Ä¢ Managed node groups with auto-scaling');
    console.log('   ‚Ä¢ Security groups and IAM roles');
    console.log('');
    console.log('‚ö° Lambda Function:');
    console.log('   ‚Ä¢ VPC support and security groups');
    console.log('   ‚Ä¢ Environment variables and monitoring');
    console.log('   ‚Ä¢ IAM roles and CloudWatch logs');
    
    console.log('\nüîó Quick Links:');
    console.log(`üì± Dashboard: http://localhost:3006/`);
    console.log(`üìã Templates: http://localhost:3006/templates`);
    console.log(`üöÄ Deployments: http://localhost:3006/deployments`);
    console.log(`üêô GitHub Import: http://localhost:3006/github-import`);
    console.log(`üñ•Ô∏è Instances: http://localhost:3006/instances`);
    console.log(`‚ò∏Ô∏è Clusters: http://localhost:3006/clusters`);
    
    console.log('\n‚ú® Your production-ready Terraform modules are now available as templates!');
    
  } catch (error) {
    console.error('‚ùå Error fetching templates:', error.message);
  }
}

// Run the script
if (require.main === module) {
  showImportedTemplates()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('‚ùå Script failed:', error);
      process.exit(1);
    });
}

module.exports = { showImportedTemplates };
