version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: terraform-dashboard-db
    environment:
      POSTGRES_DB: terraform_dashboard
      POSTGRES_USER: dashboard_user
      POSTGRES_PASSWORD: dashboard_password_change_me
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - terraform-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard_user -d terraform_dashboard"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: terraform-dashboard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - terraform-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./terraform-dashboard/backend
      dockerfile: Dockerfile
    container_name: terraform-dashboard-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://dashboard_user:dashboard_password_change_me@postgres:5432/terraform_dashboard
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_change_me_in_production
      - JWT_REFRESH_SECRET=your_jwt_refresh_secret_change_me_in_production
      - AWS_REGION=us-east-1
      - ANSIBLE_PLAYBOOKS_DIR=/app/ansible-aws-playbooks
    ports:
      - "5000:5000"
    volumes:
      - ./ansible-aws-playbooks:/app/ansible-aws-playbooks:ro
      - backend_logs:/app/logs
    networks:
      - terraform-dashboard
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ansible API
  ansible-api:
    build:
      context: ./terraform-dashboard/backend
      dockerfile: Dockerfile.ansible
    container_name: terraform-dashboard-ansible
    environment:
      - NODE_ENV=production
      - ANSIBLE_PLAYBOOKS_DIR=/app/ansible-aws-playbooks
      - AWS_REGION=us-east-1
    ports:
      - "5001:5001"
    volumes:
      - ./ansible-aws-playbooks:/app/ansible-aws-playbooks:ro
      - ansible_logs:/app/logs
    networks:
      - terraform-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nginx serving React app)
  frontend:
    build:
      context: ./terraform-dashboard/frontend
      dockerfile: Dockerfile
    container_name: terraform-dashboard-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - terraform-dashboard
    depends_on:
      - backend
      - ansible-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  ansible_logs:
    driver: local

networks:
  terraform-dashboard:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
